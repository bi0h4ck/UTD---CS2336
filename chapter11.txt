CHAPTER 11: INHERITANCE AND POLYMOPHISM

* Object-oriented programming allows you to define new classes from existing classes. This is called inheritance.

11.2 Superclasses and Subclasses
	* Inheritance enables you to define a general class (i.e., a superclass) and later extend it to more specialized classes (i.e., subclasses)

	Note the following points regarding inheritance:
	■ Contrary to the conventional interpretation, a subclass is not a subset of its superclass. In fact, a subclass usually contains more information and methods than its superclass.

	■ Private data fields in a superclass are not accessible outside the class. Therefore, they cannot be used directly in a subclass. They can, however, be accessed/mutated through public accessors/mutators if defined in the superclass.

	■ Inheritance is used to model the is-a relationship. Do not blindly extend a class just for the sake of reusing methods.  For example, it makes no sense for a Tree class to extend a Person class, even though they share common properties such as height and weight. A subclass and its superclass must have the is-a relationship.

	■ Some programming languages allow you to derive a subclass from several classes. This capability is known as multiple inheritance. Java, however, does not allow mul- tiple inheritance. A Java class may inherit directly from only one superclass. This restriction is known as single inheritance. 

11.3 Using the super Keyword
	* The keyword super refers to the superclass and can be used to invoke the super-
	class’s methods and constructors.

	* the constructors of a superclass are not inherited by a subclass. They can only be invoked from the constructors of the subclasses using the keyword super.
	* You must use the keyword super to call the superclass constructor, and the call must be the first statement in the constructor. Invoking a superclass constructor’s name in a subclass causes a syntax error.

	* In any case, constructing an instance of a class invokes the constructors of all the superclasses along the inheritance chain. When constructing an object of a subclass, the subclass construc- tor first invokes its superclass constructor before performing its own tasks. If the superclass is derived from another class, the superclass constructor invokes its parent-class constructor before performing its own tasks. This process continues until the last constructor along the inheritance hierarchy is called. This is called constructor chaining.

	* Caution
	If a class is designed to be extended, it is better to provide a no-arg constructor to avoid programming errors. Consider the following code:
public class Apple extends Fruit { 
}
	class Fruit {
		public Fruit(String name) {
			System.out.println("Fruit's constructor is invoked");
		}
	}
 
Since no constructor is explicitly defined in Apple, Apple’s default no-arg constructor is defined implicitly. Since Apple is a subclass of Fruit, Apple’s default constructor automatically invokes Fruit’s no-arg constructor. However, Fruit does not have a no-arg constructor, because Fruit has an explicit constructor defined. Therefore, the program cannot be compiled.


11.4 Overriding Methods
	* To override a method, the method must be defined in the subclass using the same sig- nature and the same return type as in its superclass.

	* A subclass inherits methods from a superclass. Sometimes it is necessary for the subclass to modify the implementation of a method defined in the superclass. This is referred to as method overriding.

	■ An instance method can be overridden only if it is accessible. Thus a private method can- not be overridden, because it is not accessible outside its own class. If a method defined in a subclass is private in its superclass, the two methods are completely unrelated.
	■ Like an instance method, a static method can be inherited. However, a static method cannot be overridden. If a static method defined in the superclass is redefined in a subclass, the method defined in the superclass is hidden. The hidden static methods can be invoked using the syntax SuperClassName.staticMethodName.

11.5 Overriding vs. Overloading
	* Overloading means to define multiple methods with the same name but different signatures. Overriding means to provide a new implementation for a method in the subclass.

11.6 The Object Class and Its toString() Method
	* Every class in Java is descended from the java.lang.Object class.

11.7 Polymorphism
	* Polymorphism means that a variable of a supertype can refer to a subtype object.

11.8 Dynamic Binding
	* A method can be implemented in several classes along the inheritance chain. The JVM decides which method is invoked at runtime.

11.9 Casting Objects and the instanceof Operator 
	* One object reference can be typecast into another object reference. This is called cast-
ing object.

Object o = new Student(); // Implicit casting 
Student b = o; // compile error would occur.
Student b = (Student)o; // Explicit casting

	* It is always possible to cast an instance of a subclass to a variable of a superclass (known as upcasting), because an instance of a subclass is always an instance of its superclass. When casting an instance of a superclass to a variable of its subclass (known as downcasting), explicit casting must be used to confirm your intention to the compiler with the (SubclassName) cast notation. 

	* For the casting to be successful, you must make sure that the object to be cast is an instance of the subclass. If the superclass object is not an instance of the subclass, a runtime ClassCastException occurs.

	Object myObject = new Circle();
	... // Some lines of code
	/** Perform casting if myObject is an instance of Circle */ 
	if (myObject instanceof Circle) {
		System.out.println("The circle diameter is " + ((Circle)myObject).getDiameter());
		... 
	}

11.10 The Object’s equals Method
	* Like the toString() method, the equals(Object) method is another useful method defined in the Object class.
	 object1.equals(object2);

11.11 The ArrayList Class
	* An ArrayList object can be used to store a list of objects.

	* ArrayList is known as a generic class with a generic type E. You can specify a concrete type to replace E when creating an ArrayList. 
	For example, the following statement creates an ArrayList and assigns its reference to variable cities. This ArrayList object can be used to store strings.

	ArrayList<String> cities = new ArrayList<String>();

	ArrayList<AConcreteType> list = new ArrayList<AConcreteType>(); 
	can be simplified by
	ArrayList<AConcreteType> list = new ArrayList<>();
	The concrete type is no longer required in the constructor thanks to a feature called type inference. The compiler is able to infer the type from the variable declaration.

11.12 Useful Methods for Lists
	* Java provides the methods for creating a list from an array, for sorting a list, and finding maximum and minimum element in a list, and for shuffling a list.

	Here is an example to create an array list from an array:
	String[] array = {"red", "green", "blue"};
	ArrayList<String> list = new ArrayList<>(Arrays.asList(array));

	the following code to create an array of objects from an array list.
	String[] array1 = new String[list.size()]; 
	list.toArray(array1);

	static sort method in the java.util.Collections class to sort the elements. Here are examples:
	Integer[] array = {3, 5, 95, 4, 15, 34, 3, 6, 5}; 
	ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array)); 
	java.util.Collections.sort(list);
	System.out.println(list);

	Integer[] array = {3, 5, 95, 4, 15, 34, 3, 6, 5}; 
	ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array)); 
	System.out.println(java.util.Collections.max(list)); 
	System.out.println(java.util.Collections.min(list));

11.14 The protected Data and Methods 
	* A protected member of a class can be accessed from a subclass.

	* private -> hide the members of the class completely so that they cannot be accessed directly from outside the class. 
	* no modifiers (the default) -> allow the members of the class to be accessed directly from any class within the same package but not from other packages. 
	* protected -> to enable the members of the class to be accessed by the subclasses in any package or classes in the same package. 
	* public -> enable the members of the class to be accessed by any class.

	* Note: A subclass may override a protected method defined in its superclass and change its visibility to public. However, a subclass cannot weaken the accessibility of a method defined in the superclass. For example, if a method is defined as public in the superclass, it must be defined as public in the subclass.

11.15 Preventing Extending and Overriding
	* Neither a final class nor a final method can be extended. A final data field is a constant.
	* You may occasionally want to prevent classes from being extended. In such cases, use the final modifier to indicate that a class is final and cannot be a parent class. 

