CHAPTER 7: SINGLE-DIMENSIONAL ARRAYS

7.2 Array basics
	* Once an array is created, its size is fixed. An array reference variable is used to access the elements in an array using an index.
	* Syntax
	elementType[] arrayRefVar;
	* using the new operator and assign its reference
	arrayRefVar = new elementType[arraySize];
	* array initializer
	elementType[] arrayRefVar = {value0, value1, ..., valuek};
	
	* For an array of the char[] type, it can be printed using one print statement. 
	For exam- ple, the following code displays Dallas:
	char[] city = {'D', 'a', 'l', 'l', 'a', 's'}; System.out.println(city);

	* arraycopy(sourceArray, srcPos, targetArray, tarPos, length);
The parameters srcPos and tarPos indicate the starting positions in sourceArray and targetArray, respectively. The number of elements copied from sourceArray to targ- etArray is indicated by length. 

	* new elementType[]{value0, value1, ..., valuek};
There is no explicit reference variable for the array. Such array is called an anonymous
array.

	* Arrays are objects in Java. The JVM stores the objects in an area of memory called the heap, which is used for dynamic memory allocation.

	* // Create lowercase letters randomly and assign // them to the array
for (int i = 0; i < chars.length; i++)
  chars[i] = RandomCharacter.getRandomLowerCaseLetter();

  	* sort or parallelSort method to sort a whole array or a partial array

  	*  binarySearch method to search for a key in an array. The array must be pre- sorted in increasing order. If the key is not in the array, the method returns â€“(insertionIndex + 1). 

  	int[] list = {2, 4, 7, 10, 11, 45, 50, 59, 60, 66, 69, 70, 79}; 
  	System.out.println("1. Index is " + java.util.Arrays.binarySearch(list, 11)); System.out.println("2. Index is " + java.util.Arrays.binarySearch(list, 12));
char[] chars = {'a', 'c', 'g', 'x', 'y', 'z'}; 
System.out.println("3. Index is " + java.util.Arrays.binarySearch(chars, 'a')); System.out.println("4. Index is " + java.util.Arrays.binarySearch(chars, 't'));
The output of the preceding code is 
1. Index is 4
2. Index is -6
3. Index is 0
4. Index is -4


int[] list1 = {2, 4, 7, 10};
int[] list2 = {2, 4, 7, 10};
int[] list3 = {4, 2, 7, 10}; 
System.out.println(java.util.Arrays.equals(list1, list2)); // true System.out.println(java.util.Arrays.equals(list2, list3)); // false


int[] list1 = {2, 4, 7, 10};
int[] list2 = {2, 4, 7, 7, 7, 10};
java.util.Arrays.fill(list1, 5); // Fill 5 to the whole array 
java.util.Arrays.fill(list2, 1, 5, 8); // Fill 8 to a partial array

You can also use the toString method to return a string that represents all elements in the array. This is a quick and simple way to display all elements in the array. For example, the following code
int[] list = {2, 4, 7, 10}; 
System.out.println(Arrays.toString(list));

displays[2, 4, 7, 10].


	* Integer.parseInt(args[0]) (line 16) converts a digital string into an integer. The string must consist of digits. If not, the program will terminate abnormally.
