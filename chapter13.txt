CHAPTER 13: ABSTRACT CLASSES AND INTERFACES

13.1 Introduction
	* A superclass defines common behavior for related subclasses. An interface can be used to define common behavior for classes (including unrelated classes).

13.2 Abstract Classes
	* An abstract class cannot be used to create objects. An abstract class can contain abstract methods, which are implemented in concrete subclasses.

	* Abstract classes are like regular classes, but you cannot create instances of abstract classes using the new operator. 
	* An abstract method is defined without implementation. Its implementation is provided by the subclasses. A class that contains abstract methods must be defined as abstract.

	Interesting Points about Abstract Classes
	■ An abstract method cannot be contained in a nonabstract class. If a subclass of an abstract superclass does not implement all the abstract methods, the subclass must be defined as abstract. In other words, in a nonabstract subclass extended from an abstract class, all the abstract methods must be implemented. Also note that abstract methods are nonstatic.

	■ An abstract class cannot be instantiated using the new operator, but you can still define its constructors, which are invoked in the constructors of its subclasses. For instance, the constructors of GeometricObject are invoked in the Circle class and the Rectangle class.

	■ A class that contains abstract methods must be abstract. However, it is possible to define an abstract class that doesn’t contain any abstract methods. In this case, you cannot create instances of the class using the new operator. This class is used as a base class for defining subclasses.

	■ A subclass can override a method from its superclass to define it as abstract. This is very unusual, but it is useful when the implementation of the method in the super- class becomes invalid in the subclass. In this case, the subclass must be defined as abstract.

	■ A subclass can be abstract even if its superclass is concrete. For example, the Object class is concrete, but its subclasses, such as GeometricObject, may be abstract

	■ You cannot create an instance from an abstract class using the new operator, but an abstract class can be used as a data type. Therefore, the following statement, which creates an array whose elements are of the GeometricObject type, is correct.

	GeometricObject[] objects = new GeometricObject[10];
	You can then create an instance of GeometricObject and assign its reference to
	the array like this:
	objects[0] = new Circle();

13.3 Case Study: the Abstract Number Class 
	* Number is an abstract superclass for numeric wrapper classes, BigInteger, and
	BigDecimal.

13.4 Case Study: Calendar and GregorianCalendar 
	* GregorianCalendar is a concrete subclass of the abstract class Calendar.

13.5 Interfaces
	* An interface is a class-like construct that contains only constants and abstract methods.
	* An interface is treated like a special class in Java. Each interface is compiled into a separate bytecode file, just like a regular class. 

13.6 The Comparable Interface
	* The Comparable interface defines the compareTo method for comparing objects.

	 // Interface for comparing objects, defined in java.lang
	package java.lang;
	public interface Comparable<E> { public int compareTo(E o);
	}

	* The compareTo method determines the order of this object with the specified object o and returns a negative integer, zero, or a positive integer if this object is less than, equal to, or greater than o.

	1 System.out.println(new Integer(3).compareTo(new Integer(5))); 
	2 System.out.println("ABC".compareTo("ABE"));
	3 java.util.Date date1 = new java.util.Date(2013, 1, 1);
	4 java.util.Date date2 = new java.util.Date(2012, 1, 1);
    5 System.out.println(date1.compareTo(date2));

    * Since all Comparable objects have the compareTo method, the java.util.Arrays .sort(Object[]) method in the Java API uses the compareTo method to compare and sorts the objects in an array, provided that the objects are instances of the Comparable inter- face. 

13.7 The Cloneable Interface
	* The Cloneable interface specifies that an object can be cloned.
	* The Cloneable interface in the java.lang package is defined as follows:
	package java.lang;
	public interface Cloneable {
	}
	* This interface is empty. An interface with an empty body is referred to as a marker interface. A marker interface does not contain constants or methods. It is used to denote that a class possesses certain desirable properties. A class that implements the Cloneable interface is marked cloneable, and its objects can be cloned using the clone() method defined in the Object class.

13.8 Interfaces vs. Abstract Classes
	* A class can implement multiple interfaces, but it can only extend one superclass.
	* Java allows only single inheritance for class extension but allows multiple extensions for interfaces. For example,
	public class NewClass extends BaseClass implements Interface1, ..., InterfaceN {
	... }

	* An interface can inherit other interfaces using the extends keyword. Such an interface is called a subinterface. For example, NewInterface in the following code is a subinterface of Interface1, . . . , and InterfaceN.

	public interface NewInterface extends Interface1, ... , InterfaceN { 
	// constants and abstract methods
	}

	* A class implementing NewInterface must implement the abstract methods defined in NewInterface, Interface1, . . . , and InterfaceN. An interface can extend other inter- faces but not classes. A class can extend its superclass and implement multiple interfaces.

	* In general, interfaces are preferred over abstract classes because an interface can define a common supertype for unrelated classes. Interfaces are more flexible than classes
